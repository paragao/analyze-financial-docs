---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack to setup environment for Textract-Comprehend workshop'

Resources:
  InputS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join
        - "-"
        - - "workshop-textract"
          - !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*      
        - PolicyName: 'AllowS3GetPut'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:Put*
              Resource: !Sub arn:${AWS::Partition}:s3::${AccountId}:${InputS3Bucket}/*
        - PolicyName: 'Textract-and-Comprehend'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - textract:*
                - comprehend:*
              Resource: 
                - !Sub arn:${AWS::Partition}:textract:${AWS::Region}:${AWS::AccountId}:*
                - !Sub arn:${AWS::Partition}:comprehend:${AWS::Region}:${AWS::AccountId}:*
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  TextractAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function in charge of launching Textract
      FunctionName: !Join
        - "-"
        - - "textract-analyze"
          - !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code: ### CHANGE TO CONTAIN ONLY THE SHELL AND NOT THE ANSWER ITSELF
        ZipFile: |
          import json
          def handler(event, context):
            # TODO: Replace with code to call textract
          	response = {
          		'statusCode': 200,
          		'body': json.dumps('Hello!')
          	}
          	return response
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ## REQUIRE TOPIC FOR ASYNC OPERATION
  TextractAsyncTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TextractWorkshop
      TopicName: TextractWorkshop
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ## Lambda Subscription that will upload the data back into the bucket 
  DCVLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref TextractAsyncTopic
      Protocol: lambda
      Endpoint: !GetAtt AsyncGetDocument.Arn
      Region: !Ref 'AWS::Region'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  DCVLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt AsyncGetDocument.Arn
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref TextractAsyncTopic
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  AsyncGetDocument:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
              return {
                  'statusCode': '200',
                  'body': 'Instance stopped succesfully'
              }
      FunctionName: 'textract-async-getdocument'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt AsyncGetDocumentExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  AsyncGetDocumentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: "AllowInvokeFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow" 
                Action: "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: 'AllowStopInstance'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ec2:StopInstances"
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                #Condition:
                #  StringEquals:
                #    - !Sub '"aws:ResourceTag/"${Tag}: ${TagValue} ' ##TODO:  Still trying to add tags as a condition and implement least privilege
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

Outputs:
  InputS3Bucket:
    Description: Name of the input bucket
    Value: !Ref InputS3Bucket
  DocumentTextractFunction:
    Description: Function that will be triggered when a document is uploaded in the input bucket
    Value: !Ref DocumentTextract

