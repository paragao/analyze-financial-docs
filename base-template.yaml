---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack to setup environment for Textract-Comprehend workshop'

Resources:
  InputS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Join
        - "-"
        - - "workshop-textract"
          - !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*      
        - PolicyName: 'AllowS3GetPut'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:Put*
              Resource: !Sub arn:${AWS::Partition}:s3::${AccountId}:${InputS3Bucket}/*
        - PolicyName: 'Textract-and-Comprehend'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - textract:*
                - comprehend:*
              Resource: 
                - !Sub arn:${AWS::Partition}:textract:${AWS::Region}:${AWS::AccountId}:*
                - !Sub arn:${AWS::Partition}:comprehend:${AWS::Region}:${AWS::AccountId}:*
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  TextractAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function in charge of launching Textract
      FunctionName: !Join
        - "-"
        - - "textract-analysis"
          - !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 120
      Code: 
        ZipFile: |
          import json
          import boto3
          import urllib
          import os
          import uuid

          # ADD your Textract and Comprehend client/resource here
          s3 = boto3.client('s3')
          ## ANSWER 1 HERE:


          def download_object(request):
              print("request: {}\n".format(request))
                  
              bucket = request["bucketName"]
              key = request["objectName"]

              tmpkey = key.replace('/', '')
              download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)
              
              print('downloading file\n')
              s3.download_file(bucket, key, download_path)

              return download_path

          def upload_object(request, textractOutput):
              print("request: {}\n".format(request))

              bucket = request["bucketName"]
              fileName = '/tmp/{}-output.json'.format(os.path.splitext(request["objectName"].lower())[0])
              new_object = 'textract_output/{}.json'.format(os.path.splitext(request["objectName"].lower())[0])

              # save JSON output as a file to be uploaded
              with open(fileName, 'w') as f:
                  json.dump(textractOutput, f)
                  
              print('uploading file\n')
              s3.upload_file(fileName, bucket, new_object)

          def handler(event, context):
              print("event: {}\n".format(event))

              topicArn = os.environ.get('TOPIC_ARN')
              roleArn = os.environ.get('ROLE_ARN')

              request = {}
              request["bucketName"] = event['Records'][0]['s3']['bucket']['name']
              request["objectName"] = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])
              ext = os.path.splitext(request["objectName"].lower())[1]

              # if the file is JPG and PNG we can make a synchronus call to Textract. If it is a PDF, it have to be asynchronous.     
              if (ext and ext in [".jpg", ".jpeg", ".png"]):
                  #TODO: create your sync call here. 
                  #use download_object(request) to download the object so you can send it to Textract
                  print('sync API call')
                  syncResponse = None
                  # ANSWER 2 HERE:

                  upload_object(request, syncResponse)
                  ###END ANSWER###

              else: 
                  #TODO: create your async call here
                  # use download_object(request) to download the object so you can send it to Textract
                  print('async API call')
                  asyncResponse = None 

                  #ANSWER 3 HERE:
                    # make sure you use upload_object(request, json_output) by the end of the answer so you save the json output as an object in Amazon S3
                  ###END ANSWER###

              # should return 200 for the API Gateway. Body can be different, if required.
              if asyncResponse is not None:
                  return {
                      'statusCode': 200,
                      'body': json.dumps(asyncResponse) 
                  }
              else: 
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Success!')
                  }

    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ## REQUIRE TOPIC FOR ASYNC OPERATION
  TextractAsyncTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TextractWorkshop
      TopicName: TextractWorkshop
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ##TODO:
    # lambda for comprehend
    # lambda execution role for comprehend
    # dataRoleArn for the async ops
    # verify if a lambda layer will be required
    # how to make everything double, triple, etc.... 

Outputs:
  InputS3Bucket:
    Description: Name of the input bucket
    Value: !Ref InputS3Bucket
  DocumentTextractFunction:
    Description: Function that will be triggered when a document is uploaded in the input bucket
    Value: !Ref DocumentTextract

